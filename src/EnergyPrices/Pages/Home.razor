@page "/"

@using ApexCharts
@using EnergyPrices.Services
@using Size = MudBlazor.Size

@inject PriceService PriceService

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h5">Electricity Prices</MudText>

        <MudGrid>
            <MudItem xs="12" md="6">
                <MudDatePicker @bind-Date="selectedDate" Label="Select Date" OnChange="OnDateChanged" />
            </MudItem>
        </MudGrid>

        @if (_isLoading)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
        }
        else
        {
            <ApexChart TItem="StackedPriceData" @ref="_chart">
                <ApexSeries TItem="StackedPriceData" Type="ApexSeriesType.Bar" Name="Kw Price" Data="kwPriceData"/>
                <ApexSeries TItem="StackedPriceData" Type="ApexSeriesType.Bar" Name="Grid Price" Data="gridPriceData"/>
                <ApexXAxis Categories="chartCategories"></ApexXAxis>
                <ApexYAxis>
                    <ApexTitle Text="Price (DKK/kWh)"></ApexTitle>
                </ApexYAxis>
                <ApexDataLabels Enabled="true"/>
            </ApexChart>
        }
    </MudCardContent>
</MudCard>
@code {
    private ApexChart<StackedPriceData>? _chart;
    private List<string> chartCategories = new();
    private List<int> kwPriceData = new();
    private List<int> gridPriceData = new();
    private DateTime? selectedDate = new DateTime(2024, 12, 15);

    protected override async Task OnInitializedAsync()
    {
        await LoadChartData();
    }

    private bool _isLoading = false;

    private async Task LoadChartData()
    {
        _isLoading = true;
        if (selectedDate is null)
        {
            return;
        }
        
        var date = DateOnly.FromDateTime(selectedDate.Value);
        var response = await PriceService.GetPricesAsync(date, "DK1");
        if (response is null)
        {
            return;
        }

        chartCategories = response.Prices.Select(p => p.LocalTime.ToString("HH:mm")).ToList();
        kwPriceData = response.Prices.Select(p => p.KwPrice).ToList();
        gridPriceData = response.Prices.Select(p => p.TotalGrid).ToList();
        
        _isLoading = false;
        
        // Refresh the chart
        if (_chart is not null)
        {
            await _chart.RenderAsync();
        }
    }

    private async Task OnDateChanged()
    {
        await LoadChartData();
    }


    public class StackedPriceData
    {
        public string Category { get; set; }
        public int KwPrice { get; set; }
        public int GridPrice { get; set; }
    }

}
